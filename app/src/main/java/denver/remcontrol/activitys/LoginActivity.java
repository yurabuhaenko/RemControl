package denver.remcontrol.activitys;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.content.Intent;

import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

import container.ContainerSignInResponse;
import container.User;
import denver.remcontrol.R;
import system.ActionHttp;
import system.InternetConnectionChecker;


/**
 *@author yurabuhaenko
 * Autogenerated activity with default methods and forms
 * Activity to login user or redirect him to registration web page
 * extends
 * @see NavigationDrawerActivity
 */

public class LoginActivity extends NavigationDrawerActivity  {

    private UserLoginTask mAuthTask = null;

    // UI references.
    private AutoCompleteTextView mEmailView;
    private EditText mPasswordView;
    private View mProgressView;
    private View mLoginFormView;

    /**
     * default on create method
     * initialize view elements
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);

        postCreate(savedInstanceState,R.layout.activity_login);

        // Set up the login form.
        mEmailView = (AutoCompleteTextView) findViewById(R.id.email);

        mPasswordView = (EditText) findViewById(R.id.password);
        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {
                if (id == R.id.login || id == EditorInfo.IME_NULL) {
                    attemptLogin();
                    return true;
                }
                return false;
            }
        });


        mLoginFormView = findViewById(R.id.login_form);
        mProgressView = findViewById(R.id.login_progress);
        getSupportActionBar().setTitle("Увійти в систему");
    }


    /**
     * On click method, executes attempt to login
     * @param view
     */
    public void onClickButtonSignIn(View view) {
        attemptLogin();
    }

    /**
     * redirect to web page with registration on 1551
     * @param view
     */
    public void onClickButtonSignUp(View view) {
       //Intent intent = new Intent(LoginActivity.this, RegistrationActivity.class);
       // startActivity(intent);
    }


    /**
     * check if is all forms are filed correct
     * if data is valid, execute async task to make authorization request
     */
    public void attemptLogin() {
        if (mAuthTask != null) {
            return;
        }

        // Reset errors.
        mEmailView.setError(null);
        mPasswordView.setError(null);

        // Store values at the time of the login attempt.
        String email = mEmailView.getText().toString();
        String password = mPasswordView.getText().toString();

        boolean cancel = false;
        View focusView = null;


        // Check for a valid password, if the user entered one.
        if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {
            mPasswordView.setError(getString(R.string.error_invalid_password));
            focusView = mPasswordView;
            cancel = true;
        }

        // Check for a valid email address.
        if (TextUtils.isEmpty(email)) {
            mEmailView.setError(getString(R.string.error_field_required));
            focusView = mEmailView;
            cancel = true;
        } else if (!isEmailValid(email)) {
            mEmailView.setError(getString(R.string.error_invalid_email));
            focusView = mEmailView;
            cancel = true;
        }

        if (cancel) {
            // There was an error; don't attempt login and focus the first
            // form field with an error.
            focusView.requestFocus();
        } else {
            // Show a progress spinner, and kick off a background task to
            // perform the user login attempt.
            if(InternetConnectionChecker.isNetworkConnected(LoginActivity.this)) {
                showProgress(true);
                mAuthTask = new UserLoginTask(email, password);
                mAuthTask.execute((Void) null);
            }else{
                Toast toast = Toast.makeText(getApplicationContext(),
                        getResources().getString(R.string.no_internet_connection_error), Toast.LENGTH_SHORT);
                toast.show();
            }
        }
    }


    /**
     * check is valid email is
     * @param email email to check
     * @return if it valid
     */
    private boolean isEmailValid(String email) {
        //TODO: Replace this with your own logic
        return email.contains("@");
    }

    /**
     * check is valid password is
     * @param password password to check
     * @return if it valid
     */
    private boolean isPasswordValid(String password) {
        //TODO: Replace this with your own logica
        return password.length() > 4;
    }



    /**
     * show or hide progress bar
     * @param show if true - progress bar shown, activity layout hides; if false - progress bar hides, activity layout shown;
     */
    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
    public void showProgress(final boolean show) {
        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
        // for very easy animations. If available, use these APIs to fade-in
        // the progress spinner.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);

            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
            mLoginFormView.animate().setDuration(shortAnimTime).alpha(
                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
                }
            });

            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mProgressView.animate().setDuration(shortAnimTime).alpha(
                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
                }
            });
        } else {
            // The ViewPropertyAnimator APIs are not available, so simply show
            // and hide the relevant UI components.
            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);
            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }



    /**
     * @author SergPohh
     * asynchronic class to make authorization request
     */
    public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {

        private final String mEmail;
        private final String mPassword;
        private String mError;
        private String name;

        ContainerSignInResponse signInResponse;

        /**
         * def constructor
         * @param email to request
         * @param password to request
         */
        UserLoginTask(String email, String password) {
            mEmail = email;
            mPassword = password;
        }


        /**
         * make request by
         * @see ActionHttp
         * if is no error, save user data & all user appeals from server and save it in
         * @see system.RemControlApplication
         * Shared Preferences
         *
         * @param params
         * @return if is ok authorization
         */
        @Override
        protected Boolean doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.

            ActionHttp sh = new  ActionHttp();

            // Making a request to url and getting response

            signInResponse = sh.authorizationRequest(mEmail,mPassword, LoginActivity.this);

            if(signInResponse.isError){
                if( signInResponse.code.equals("AUTH_ERROR") ){
                    mError = signInResponse.message;
                }else {
                    mError = "error!!"; ///DATA_ERROR   -- wrong mail
                }

            }else{
                signInResponse.user.setPassword(mPassword);
                remControlApplication.setUser(signInResponse.user);
                remControlApplication.saveUser();
                remControlApplication.setAppealSents(signInResponse.appealList);
                return true;
            }

              ////geluxilo@inboxdesign.me
                /////////get error
            return false;
        }


        /**
         * If authorization was successful make toast with success massage, clean activities stack and start new AppealActivity
         * If sending was fail set error massage on view with error text
         * @param success result of doInBackground()
         */
        @Override
        protected void onPostExecute ( final Boolean success){
            mAuthTask = null;
            showProgress(false);

            if (success) {
                Toast toast = Toast.makeText(getApplicationContext(),
                        "Sign In Success. WELCOME " + name, Toast.LENGTH_SHORT);
                toast.show();
                Intent newIntent = new Intent(LoginActivity.this, AppealActivity.class);
                newIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                newIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(newIntent);
            } else {
                // mPasswordView.setError(getString(R.string.error_incorrect_password));
                mPasswordView.setError(mError);
                mPasswordView.requestFocus();
            }
        }
    }



}